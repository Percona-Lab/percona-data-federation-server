name: Quality Assurance

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  rs_tests:
    runs-on: ubuntu-latest
    steps:
      - name: checkout the source code
        uses: actions/checkout@v4

        # this step is a prerequisite for checking the formatting;
        # the produced artifacts will be reused when running the tests
      - name: check that the code is syntactically correct
        run: cargo check --all-targets --verbose

      - name: check that the code is properly formatted
        run: cargo fmt --all --check --verbose

      - name: scan the project for unused dependencies
        run: |
          cargo install cargo-machete
          cargo machete

      - name: run static analysis of the code
        run: cargo clippy --no-deps

      - name: run the unit and integration tests
        run: cargo test --no-fail-fast --verbose

      - name: cache the Rust build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/
            target/
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}

  py_tests:
    runs-on: ubuntu-latest
    needs: rs_tests
    steps:
      - name: checkout the source code
        uses: actions/checkout@v4

      - name: install uv
        uses: astral-sh/setup-uv@v6

      - name: install the pinned Python version
        run: uv python install

      - name: install the dependencies
        run: uv sync --locked --all-extras --dev

      - name: reuse the cached Rust build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/
            target/
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}

      - name: build the binary
        run: cargo build --verbose

      - name: run the functional tests on the binary
        run: uv run pytest pytests
